% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MBPCAOS.R
\name{MBPCAOS}
\alias{MBPCAOS}
\title{MultiBlock Principal Components Analysis with Optimal Scaling features}
\usage{
MBPCAOS(
  data,
  level.scale = rep("num", ncol(data)),
  blocks,
  blocks.name = paste("Bloc", 1:length(blocks)),
  block.scaling = "inertia",
  nb.comp = 2,
  maxiter = 100,
  threshold = 1e-06,
  supp.var = NULL,
  print = TRUE,
  init = "rdm"
)
}
\arguments{
\item{data}{a data frame with n rows (individuals) and p columns (numeric, nominal and/or ordinal variables)}

\item{level.scale}{vector(length p) giving the nature of each variable. Possible values: "nom", "ord", "num"}

\item{blocks}{vector(length k) with number of variables in each bloc}

\item{blocks.name}{vector(length k) with names of each bloc}

\item{block.scaling}{scaling applied to each block. Possible value are : \itemize{
  \item "inertia"(default): each quantified block is divided by its total inertia (sum of square).
  \item "lambda1" : each quantified block is divided by its the first singular value.
  \item "null" : no scaling is applied
}}

\item{nb.comp}{number of components of the model (by default 2)}

\item{maxiter}{maximum number of iterations.}

\item{threshold}{the threshold for assessing convergence}

\item{supp.var}{a vector indicating the indexes of the supplementary variables}

\item{print}{boolean (TRUE by default), if TRUE ther order of the categories of ordinal variables are print}

\item{init}{Intitialization strategy, possible values are :
\itemize{
  \item "rdm" (default) : random initialisation
  \item "svd": components are initialized with the singular value decomposition of the concatenated and pretreated variables (numeric variables are standardized and categorical variables are coded as pseudo disjunctive and weighted by the frequencies of the categories)
}}
}
\value{
Dimension reduction
 \itemize{
  \item weigths : list of weights of the variables (loadings and weights are the same in PCA-like model)
  \item components : data.frame with individuals scores for each dimension
  \item inertia : percentage and cumulative percentage of variance of the quantified variables explained
  }
Quantifications
  \itemize{
  \item quantified.data : optimally quantified variables
  \item quantification.categories.nom : list of optimally quantified categories (nominal variables)
  \item quantification.categories.ord : list of optimally quantified categories (ordinal variables)
  \item level.scale : nature of scaling choosen for each variable
  \item data : orginal dataset
  }

  Blocks results
\itemize{
  \item block.components : components associated with each block
  \item block.weight : weights associated with each block
  \item blocks : number of variable in each block
  \item blocks.name : name of each block
}

 Algorithm
\itemize{
  \item summary : summary of the number of variables according to their nature
  \item loss.tot : global loss for all variables
  \item stockiter : evolution of the criterion for each ieration
}

Supplementary variables
\itemize{
  \item var.supp : original supplementary variables
  \item level.scale.supp : level of scaling of supplementary variables
  \item coord.supp.num : coordinates of supplementary numeric variables (correlation with components)
  \item coord.supp.quali : coordinates of qualitatve variables (barycenters)
}
}
\description{
Perform MBPCAOS
}
\examples{

data('antibiotic')
antb.uses <- antibiotic[,c('Atb.conso','Atb.Sys')]
health <- antibiotic[,c('Age','Loss')]
vet.practices <- antibiotic[,c(6:15)]
antibiotic <- data.frame(antb.uses,health,vet.practices)
# Defining blocks
blocks.name =  c("antibiotic.uses","Health.of.turkeys","Veterinary.practices")
blocks <- c(2,2,10)

# Level of scaling
level.scale <- rep(NA,ncol(antibiotic))
res.nature <- nature.variables(antibiotic)
level.scale [res.nature$p.numeric] <- "num"
level.scale [res.nature$p.quali] <- "nom"
#Warning; the ordinal nature of variables can not be detected automaticaly.
level.scale[c(1,14)] <- "ord"

# MBPCAOS
res.MBPCAOS <- MBPCAOS(data = antibiotic,
                     level.scale = level.scale,
                      blocks = blocks,
                      blocks.name = blocks.name,
                      nb.comp = 3)

# Blocks graphs
plot.MBPCAOS(x = res.MBPCAOS,choice = 'blocks')



}
